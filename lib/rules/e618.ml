(** E618: Avoid X__Y Module Access - Use X.Y Instead *)

type payload = { module_path : string; suggested_path : string }

let check (ctx : Context.file) =
  let dump_data = Context.dump ctx in

  (* Check identifiers for double underscore module access patterns *)
  let issues = ref [] in

  List.iter
    (fun (elt : Dump.elt) ->
      (* Look for patterns like Module__Submodule *)
      let name = Dump.name_to_string elt.Dump.name in
      if String.contains name '_' then
        (* Skip autogenerated Dune__exe prefixes *)
        if not (String.starts_with ~prefix:"Dune__exe" name) then
          (* Look for exact double underscore pattern *)
          let double_underscore_pattern = Re.compile (Re.str "__") in
          if Re.execp double_underscore_pattern name then
            let suggested =
              Re.replace_string double_underscore_pattern ~by:"." name
            in
            (* Fix any double dots that might have resulted from the replacement *)
            let double_dot_pattern = Re.compile (Re.str "..") in
            let suggested =
              Re.replace_string double_dot_pattern ~by:"." suggested
            in
            match Dump.location elt with
            | Some loc ->
                issues :=
                  Issue.v ~loc
                    { module_path = name; suggested_path = suggested }
                  :: !issues
            | None -> ())
    dump_data.identifiers;

  !issues

let pp ppf { module_path; suggested_path } =
  Fmt.pf ppf "Use '%s' instead of '%s' - avoid double underscore module access"
    suggested_path module_path

let rule =
  Rule.v ~code:"E618" ~title:"Avoid X__Y Module Access"
    ~category:Style_modernization
    ~hint:
      "Avoid using double underscore module access like 'Module__Submodule'. \
       Use dot notation 'Module.Submodule' instead. Double underscore notation \
       is internal to the OCaml module system and should not be used in \
       application code."
    ~examples:
      [
        {
          is_good = false;
          code =
            {|let result = Merlint__Location.v ~file:"test.ml" 
                   ~start_line:1 ~start_col:0 ~end_line:1 ~end_col:10|};
        };
        {
          is_good = true;
          code =
            {|let result = Merlint.Location.v ~file:"test.ml" 
                   ~start_line:1 ~start_col:0 ~end_line:1 ~end_col:10|};
        };
      ]
    ~pp (File check)
