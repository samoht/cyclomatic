open Merlint

(** Generate markdown from guide elements *)
let rec element_to_markdown = function
  | Guide.Title s -> Fmt.str "# %s\n" s
  | Section (title, elements) ->
      let content =
        List.map element_to_markdown elements |> String.concat "\n"
      in
      Fmt.str "## %s\n\n%s" title content
  | Paragraph s -> Fmt.str "%s\n" s
  | Code s -> Fmt.str "```ocaml\n%s\n```\n" s
  | Rule rule_code -> (
      (* Find the rule with matching code *)
      let rule_opt =
        List.find_opt (fun r -> Rule.code r = rule_code) Data.all_rules
      in
      match rule_opt with
      | None -> Fmt.str "### [%s] Rule not found\n\n" rule_code
      | Some rule ->
          let examples_md =
            match Rule.examples rule with
            | [] -> ""
            | examples ->
                let format_example (ex : Rule.example) =
                  let label =
                    if ex.is_good then "✅ **Good:**" else "❌ **Bad:**"
                  in
                  Fmt.str "%s\n```ocaml\n%s\n```\n" label ex.code
                in
                "\n\n**Examples:**\n\n"
                ^ (List.map format_example examples |> String.concat "\n")
          in
          Fmt.str "### [%s] %s\n\n%s%s\n" rule_code (Rule.title rule)
            (Rule.hint rule) examples_md)

let generate () =
  let content =
    List.map element_to_markdown Guide.content |> String.concat "\n"
  in
  let header =
    {|<!-- This file is auto-generated by bin/generate_style_guide.ml -->
<!-- Do not edit manually. Edit lib/guide.ml instead. -->

|}
  in
  header ^ content

let () =
  (* Get output path from command line or use default *)
  let output_path =
    if Array.length Sys.argv > 1 then Sys.argv.(1) else "STYLE_GUIDE.md"
  in

  (* Generate and write markdown *)
  let markdown = generate () in
  let oc = open_out output_path in
  output_string oc markdown;
  close_out oc;

  Fmt.pr "Generated %s@." output_path
